/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/.well-known/jwks.json': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get JWKS */
    get: operations['getJwks']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/api/v1/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Register account */
    post: operations['register']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/api/v1/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Login */
    post: operations['login']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/api/v1/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Refresh access token (via cookie) */
    post: operations['refresh']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/api/v1/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Logout */
    post: operations['logout']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    RegisterRequest: {
      username: string
      /** Format: email */
      email: string
      /** Format: password */
      password: string
    }
    RegisterResponse: {
      message: string
    }
    LoginRequest: {
      usernameOrEmail: string
      /** Format: password */
      password: string
    }
    AccessTokenResponse: {
      tokenType: string
      accessToken: string
      /** Format: int64 */
      expiresIn: number
    }
    ApiError: {
      code?: string | null
      message: string
      upstream?: Record<string, never> | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getJwks: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  register: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          /** @description Resource location of created account (for audit only) */
          Location?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RegisterResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
    }
  }
  login: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          /** @description Refresh token cookie (httpOnly) */
          'Set-Cookie'?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccessTokenResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
      /** @description Unsupported Media Type */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
    }
  }
  refresh: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          /** @description New refresh token cookie (httpOnly) */
          'Set-Cookie'?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccessTokenResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
    }
  }
  logout: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          /** @description Cleared refresh token cookie (Max-Age=0) */
          'Set-Cookie'?: string
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
