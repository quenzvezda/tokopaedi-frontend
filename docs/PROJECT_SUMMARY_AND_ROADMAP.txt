PROJECT SUMMARY
================

Stack & Libraries
- Frontend: Vite 7 + React 18 + TypeScript
- UI: Chakra UI (single styling system)
- Routing: React Router v6
- Server state: TanStack Query
- Forms & Validation: React Hook Form + Zod
- HTTP: axios via `src/shared/lib/fetcher.ts` (with credentials, refresh on 401)
- Testing: Vitest + React Testing Library (unit/component), Playwright (E2E in `e2e/`)
- Quality: ESLint (import/order), Prettier, Husky + lint-staged

Key Files
- src/shared/lib/fetcher.ts        · axios instance (VITE_API_BASE_URL), 401 refresh via VITE_AUTH_REFRESH_PATH, error normalization (toApiError)
- src/app/providers/QueryProvider  · TanStack Query client provider
- src/app/providers/ErrorBoundary  · Global error boundary
- src/app/routes/RouteBoundary     · Per-route ErrorBoundary + Suspense fallback
- src/features/auth/services/auth.service.ts · Zod schemas + login service
- src/features/auth/api/hooks.ts   · useLogin, useCurrentUser (JWT-based for now), useLogout
- src/features/auth/context.ts     · Auth context types (split for HMR rules)
- src/features/auth/AuthContext.tsx· AuthProvider with in-memory token + refresh scheduling + BroadcastChannel
- src/features/auth/useAuth.ts     · Hook consumer for AuthContext
- src/features/auth/components/RequireAuth.tsx · Guard redirects unauth users to /login
- src/features/misc/pages/{Welcome,Forbidden,NotFound}.tsx
- src/App.tsx                      · Routes with lazy-loading + per-route boundaries
- src/shared/ui/{Button,Input,PageSkeleton,ErrorState,EmptyState}.tsx
- vite.config.ts                   · Alias `@` → `src`, Vitest config
- eslint.config.js                 · Base config + import/order rule
- agent.md                         · Engineering guide (source of truth)
 - OpenAPI JSON (Gateway):
   - http://localhost:8080/iam/v3/api-docs
   - http://localhost:8080/catalog/v3/api-docs
   - Swagger UI: http://localhost:8080/webjars/swagger-ui/index.html

Current Behavior
- Login posts to `/auth/api/v1/auth/login`. Backend sets httpOnly refresh cookie; FE stores only access token in memory and redirects to `/`.
- Axios attaches Bearer token; on 401 tries refresh via cookie (`/auth/api/v1/auth/refresh`), then retries request; on failure logs out and redirects to `/login`.
- `useCurrentUser` calls IAM `/iam/api/v1/users/me` and returns `{ id, username, email?, roles, permissions }`.
- Routing uses `React.lazy` with route-level Suspense spinners; global ErrorBoundary wraps the tree.
- Home `/` is public (catalog list). `/admin` remains protected (ADMIN).
- Tests: unit (Vitest) and E2E (Playwright) present. CI is intentionally deferred (local-only) per agent.md.
 - OpenAPI JSON endpoints are reachable via Gateway aggregator (see Key Files).

Environment
- VITE_API_BASE_URL (preferred), VITE_AUTH_REFRESH_PATH. `.env.example` provided.
- withCredentials enabled in fetcher (disabled under Vitest to avoid CORS noise).

Verification (CORS & Auth)
- Preflight (dev):
  curl -i -X OPTIONS \
    -H "Origin: http://localhost:5173" \
    -H "Access-Control-Request-Method: POST" \
    -H "Access-Control-Request-Headers: Content-Type, Authorization" \
    http://localhost:8080/auth/api/v1/auth/login
- Login (ambil cookie):
  curl -i -X POST \
    -H "Origin: http://localhost:5173" \
    -H "Content-Type: application/json" \
    --data '{"username":"demo","password":"demo"}' \
    http://localhost:8080/auth/api/v1/auth/login
- Refresh (gunakan cookie dari login):
  curl -i -X POST \
    -H "Origin: http://localhost:5173" \
    http://localhost:8080/auth/api/v1/auth/refresh


ROADMAP (Aligned with agent.md)
================================

Phase A - Current User (IAM) [Done]
1) FE: Implement real `useCurrentUser` via IAM `/users/me`.
   - Service with Zod schema; `useCurrentUser` calls service; invalidate `['currentUser']` on login/logout.
2) BE (discussion & contract):
   - Endpoint path: `/iam/api/v1/users/me`.
   - Response fields: `{ id: string, username: string, email?: string, roles: string[], permissions: string[] }` where permissions are SCOPE_*.
   - Standardize error shape `{ code?: string, message: string }` across services.
   - CORS allow-credentials for this route; cookie refresh flow + Bearer access supported.
   - OpenAPI available via Gateway SpringDoc aggregator.

Phase B — Logout UX
1) FE: Add logout UI in protected layout; call `/auth/api/v1/auth/logout` if available; clear in-memory token and React Query caches; broadcast logout; redirect to `/login`.
   - Unit tests for hook and basic render.

Phase C - Home (Catalog List) [In Progress]
1) Feature `catalog`:
   - [x] Service + Zod schema for product list (pagination normalized: Spring Page or generic).
   - [x] API hooks: `useListProducts` (query key `['products', filters]`).
   - [x] Page: public `/` with header/footer, loading skeleton, empty state, error state with retry.
   - [ ] Product card fields: price (awaiting backend), brand, image/media (future) — placeholder image used for now.
   - [ ] E2E smoke with real backend once catalog stabilized (add later).

Phase F - OpenAPI Generation [Next]
1) Generators
   - [ ] Add generator scripts: `gen:openapi:iam`, `gen:openapi:catalog`, `gen:openapi:all`.
   - [ ] Choose tool: `openapi-zod-client` (preferred) or `openapi-typescript`.
2) Refactors
   - [ ] Refactor catalog service to use generated types/schemas.
   - [ ] (Optional) Refactor IAM DTOs to generated types where appropriate.

Phase D — Admin: Roles & Permissions CRUD
1) Under `features/admin`:
   - Pages for listing and editing roles and permissions (SCOPE_*), tied to IAM.
   - Services with Zod schemas (read/write), forms with RHF + Zod, API hooks for CRUD.
   - RBAC guard (RequireRoles/HasRole) to protect access.
   - Tests: unit for forms & hooks; E2E smoke for happy path.

Phase E — Quality & Tests
- Expand unit tests (guards, services, Zod schemas) and minimal E2E smoke (login success/fail, logout, home view, admin gating).
- CI: Deferred (local-only). When enabled, pipeline should run `typecheck`, `lint`, `test`, `test:e2e:ci` (smoke), and `build`.


BACKEND COORDINATION NOTES (IAM & Auth)
=======================================

Topics to align with backend:
- Current User endpoint (IAM): `/iam/api/v1/users/me`.
  - Response: `{ id, username, email?, roles: string[], permissions: string[] }` (SCOPE_* permissions).
  - Error shape: `{ code?: string, message: string }` unified across services.
  - Auth: httpOnly refresh cookie; short-lived access token; CORS allow-credentials; specific allowed origins.
- OpenAPI: Gateway aggregator is available (SpringDoc):
  - UI aggregator: http://localhost:8080/webjars/swagger-ui/index.html
  - Switch between groups using `?urls.primaryName=<name>` e.g. `?urls.primaryName=iam`.
  - Optional FE generation: `openapi-zod-client` or `openapi-typescript` for types/schemas.

Register API (TBD)
- Endpoint path and payload to be confirmed with backend (e.g., `/auth/api/v1/auth/register`).
- Tentative FE form fields: `{ username: string, email: string, password: string }`.
- FE will add `registerService` with Zod schema and a mutation hook once the contract is finalized.

Catalog Contract (FE Expectations)
- List endpoint: `/catalog/api/v1/products?q={q}&brandId={brandId}&categoryId={categoryId}&page={page}&size={size}`.
- Response supported shapes:
  - Spring Page: `{ content: Product[], number, size, totalElements, totalPages }`
  - Generic: `{ items: Product[], page, size, total, totalPages }`
  - Array fallback: `Product[]`
- Product DTO (minimum fields for FE):
  - `id: string`, `name: string`
  - `description?: string`
  - `price?: number | string` (temporary — BE to standardize to number)
  - `brandName?: string`, `categoryName?: string`
  - `images?: string[]` (future) — FE currently uses placeholder image until provided

Acceptance Criteria (Phase A)
- FE calls IAM `/users/me` with Bearer/cookie and parses response via Zod.
- `useCurrentUser` returns `{ id, username, roles, permissions }` and caches per session.
- Login invalidates and refetches current user; logout clears and redirects.
- Error states display normalized messages via `toApiError`.


CHECKLIST QUICK START (Local)
=============================

Frontend
- [x] In-memory access token via AuthContext; cookie refresh interceptor.
- [x] React Query provider and route-level Suspense/Error boundaries.
- [x] Chakra UI as single styling system.
- [x] RHF + Zod for forms; Login refactored.
- [x] ESLint + Prettier + Husky & lint-staged.
- [x] Unit tests (Vitest); E2E (Playwright in `e2e/`).
- [x] Real `useCurrentUser` (IAM `/users/me`) with Zod schema.
- [x] Logout UI flow and tests.
- [x] Catalog list page with loading/empty/error states (public `/`).
- [x] Register page (integrated with backend; navigates to login on success).
- [ ] OpenAPI generator scripts (iam, catalog, all).
- [ ] Refactor catalog service to use generated types/schemas.
- [ ] Admin roles/permissions CRUD with RBAC guards and tests.

Backend
- [x] Confirm IAM `/users/me` payload (id, username, email?, roles[], permissions[]/SCOPE_*).
- [x] Standardize error shape `{ code, message }`.
- [x] Ensure CORS allow-credentials and cookie refresh flow.
- [x] Provide OpenAPI for IAM and Catalog endpoints (already available via SpringDoc aggregator).
