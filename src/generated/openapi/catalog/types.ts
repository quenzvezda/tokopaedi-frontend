/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/catalog/api/v1/brands': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List brands */
    get: operations['listBrands']
    put?: never
    /**
     * Create brand
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:brand:write
     */
    post: operations['createBrand']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/catalog/api/v1/brands/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    get?: never
    /**
     * Update brand
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:brand:write
     */
    put: operations['updateBrand']
    post?: never
    /**
     * Delete brand
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:brand:write
     */
    delete: operations['deleteBrand']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/catalog/api/v1/categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List categories */
    get: operations['listCategories']
    put?: never
    /**
     * Create category
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:category:write
     */
    post: operations['createCategory']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/catalog/api/v1/categories/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    get?: never
    /**
     * Update category
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:category:write
     */
    put: operations['updateCategory']
    post?: never
    /**
     * Delete category
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:category:write
     */
    delete: operations['deleteCategory']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/catalog/api/v1/products': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List products
     * @description Returns paginated list of products with optional filters.
     */
    get: operations['listProducts']
    put?: never
    /**
     * Create product
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:product:write
     */
    post: operations['createProduct']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/catalog/api/v1/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    get?: never
    /**
     * Update product
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:product:write
     */
    put: operations['updateProduct']
    post?: never
    /**
     * Delete product
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:product:write
     */
    delete: operations['deleteProduct']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/catalog/api/v1/products/{slug}': {
    parameters: {
      query?: never
      header?: never
      path: {
        slug: string
      }
      cookie?: never
    }
    /** Get product detail */
    get: operations['getProductDetail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/catalog/api/v1/products/{productId}/skus': {
    parameters: {
      query?: never
      header?: never
      path: {
        productId: string
      }
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create SKU
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:sku:write
     */
    post: operations['createSku']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/catalog/api/v1/skus/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    get?: never
    /**
     * Update SKU
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:sku:write
     */
    put: operations['updateSku']
    post?: never
    /**
     * Delete SKU
     * @description Requires roles: ADMIN or CATALOG_EDITOR, or scope: catalog:sku:write
     */
    delete: operations['deleteSku']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Brand: {
      /** Format: uuid */
      id?: string | null
      name: string
      active: boolean
    }
    BrandCreateRequest: {
      name: string
      active?: boolean | null
    }
    BrandUpdateRequest: {
      name: string
      active?: boolean | null
    }
    Category: {
      /** Format: uuid */
      id?: string | null
      /** Format: uuid */
      parentId?: string | null
      name: string
      active: boolean
      sortOrder?: number | null
    }
    CategoryCreateRequest: {
      name: string
      /** Format: uuid */
      parentId?: string | null
      active?: boolean | null
      sortOrder?: number | null
    }
    CategoryUpdateRequest: {
      name: string
      /** Format: uuid */
      parentId?: string | null
      active?: boolean | null
      sortOrder?: number | null
    }
    ApiError: {
      code?: string | null
      message: string
    }
    /** @description Minimal shape required by the UI for listing */
    Product: {
      /** @description Product identifier (stringified) */
      id: string
      name: string
      description?: string | null
      /**
       * Format: float
       * @description Optional in v1; may become required in a future version
       */
      price?: number | null
      brandName?: string | null
      categoryName?: string | null
    }
    /** @description Spring-style paginated response */
    ProductPage: {
      content: components['schemas']['Product'][]
      /** @description Zero-based page index */
      number?: number
      size?: number
      totalElements?: number
      totalPages?: number
    }
    ProductCreateRequest: {
      name: string
      shortDesc?: string | null
      /** Format: uuid */
      brandId: string
      /** Format: uuid */
      categoryId: string
      published?: boolean | null
    }
    ProductUpdateRequest: {
      name?: string | null
      shortDesc?: string | null
      /** Format: uuid */
      brandId?: string | null
      /** Format: uuid */
      categoryId?: string | null
      published?: boolean | null
    }
    ProductDetail: {
      /** Format: uuid */
      id: string
      name: string
      slug: string
      shortDesc?: string | null
      /** Format: uuid */
      brandId: string
      /** Format: uuid */
      categoryId: string
      published: boolean
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt?: string | null
    }
    SkuCreateRequest: {
      /** Format: uuid */
      productId: string
      skuCode: string
      active?: boolean | null
      barcode?: string | null
    }
    SkuUpdateRequest: {
      skuCode?: string | null
      active?: boolean | null
      barcode?: string | null
    }
    Sku: {
      /** Format: uuid */
      id: string
      /** Format: uuid */
      productId: string
      skuCode: string
      active: boolean
      barcode?: string | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  listBrands: {
    parameters: {
      query?: {
        active?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Brand'][]
        }
      }
    }
  }
  createBrand: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BrandCreateRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Brand']
        }
      }
    }
  }
  updateBrand: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BrandUpdateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Brand']
        }
      }
    }
  }
  deleteBrand: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  listCategories: {
    parameters: {
      query?: {
        active?: boolean
        parentId?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Category'][]
        }
      }
    }
  }
  createCategory: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategoryCreateRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Category']
        }
      }
    }
  }
  updateCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategoryUpdateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Category']
        }
      }
    }
  }
  deleteCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  listProducts: {
    parameters: {
      query?: {
        /** @description Free-text search query */
        q?: string
        /** @description Filter by brand id */
        brandId?: string
        /** @description Filter by category id */
        categoryId?: string
        /** @description Zero-based page index */
        page?: number
        /** @description Page size */
        size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductPage']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
    }
  }
  createProduct: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductCreateRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductDetail']
        }
      }
    }
  }
  updateProduct: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductUpdateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductDetail']
        }
      }
    }
  }
  deleteProduct: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getProductDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductDetail']
        }
      }
    }
  }
  createSku: {
    parameters: {
      query?: never
      header?: never
      path: {
        productId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SkuCreateRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Sku']
        }
      }
    }
  }
  updateSku: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SkuUpdateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Sku']
        }
      }
    }
  }
  deleteSku: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
