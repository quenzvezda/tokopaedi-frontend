openapi: 3.0.3
info:
  title: Tokopaedi IAM API (Client Contract)
  version: 1.0.0
servers:
  - url: /
security:
  - bearerAuth: []
paths:
  /iam/api/v1/users/me:
    get:
      tags: [User]
      operationId: getCurrentUser
      summary: Get current user profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /iam/api/v1/permissions:
    get:
      tags: [Permission]
      operationId: listPermissions
      summary: List permissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permission' }
    post:
      tags: [Permission]
      operationId: createPermission
      summary: Create permission
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PermissionRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Permission' } } } }

  /iam/api/v1/permissions/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer, format: int64 }
    get:
      tags: [Permission]
      operationId: getPermission
      summary: Get permission
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Permission' } } } }
    put:
      tags: [Permission]
      operationId: updatePermission
      summary: Update permission
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PermissionRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Permission' } } } }
    delete:
      tags: [Permission]
      operationId: deletePermission
      summary: Delete permission
      responses:
        '204': { description: No Content }

  /iam/api/v1/roles:
    get:
      tags: [Role]
      operationId: listRoles
      summary: List roles
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Role' } } } } }
    post:
      tags: [Role]
      operationId: createRole
      summary: Create role
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Role' } } } }

  /iam/api/v1/roles/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer, format: int64 }
    get:
      tags: [Role]
      operationId: getRole
      summary: Get role
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Role' } } } }
    put:
      tags: [Role]
      operationId: updateRole
      summary: Update role
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Role' } } } }
    delete:
      tags: [Role]
      operationId: deleteRole
      summary: Delete role
      responses:
        '204': { description: No Content }

  /iam/api/v1/roles/{roleId}/permissions:
    parameters:
      - in: path
        name: roleId
        required: true
        schema: { type: integer, format: int64 }
    get:
      tags: [Role]
      operationId: listRolePermissions
      summary: List permissions assigned to role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permission' }

  /iam/api/v1/roles/{roleId}/permissions/available:
    parameters:
      - in: path
        name: roleId
        required: true
        schema: { type: integer, format: int64 }
    get:
      tags: [Role]
      operationId: listAvailableRolePermissions
      summary: List permissions not yet assigned to role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permission' }

  /iam/api/v2/permissions:
    get:
      tags: [Permission]
      operationId: listPermissionsV2
      summary: List permissions (paginated)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
          description: Zero-based page index
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
          description: Page size
        - in: query
          name: q
          schema: { type: string, minLength: 2 }
          description: |
            Free-text search (case-insensitive contains). Applied to name and description.
            Minimum length 2. Tokens separated by space are ANDed; fields are ORed.
        - in: query
          name: sort
          style: form
          explode: true
          allowReserved: true
          schema:
            type: array
            items:
              type: string
              description: "Sort clause in the form '<field>[,asc|desc]'. Default direction asc."
          description: |
            Sorting by one or more fields. Allowed fields: id, name, description.
            Example: sort=name,asc&sort=id,asc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionPage'

  /iam/api/v2/roles:
    get:
      tags: [Role]
      operationId: listRolesV2
      summary: List roles (paginated)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
          description: Zero-based page index
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
          description: Page size
        - in: query
          name: q
          schema: { type: string, minLength: 2 }
          description: |
            Free-text search (case-insensitive contains). Applied to name only.
            Minimum length 2. Tokens separated by space are ANDed.
        - in: query
          name: sort
          style: form
          explode: true
          allowReserved: true
          schema:
            type: array
            items:
              type: string
              description: "Sort clause in the form '<field>[,asc|desc]'. Default direction asc."
          description: |
            Sorting by one or more fields. Allowed fields: id, name.
            Example: sort=name,asc&sort=id,asc
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/RolePage' } } } }

  /iam/api/v2/roles/{roleId}/permissions:
    parameters:
      - in: path
        name: roleId
        required: true
        schema: { type: integer, format: int64 }
    get:
      tags: [Role]
      operationId: listRolePermissionsV2
      summary: List permissions assigned to role (paginated)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
          description: Zero-based page index
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
          description: Page size
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionPage'

  /iam/api/v2/roles/{roleId}/permissions/available:
    parameters:
      - in: path
        name: roleId
        required: true
        schema: { type: integer, format: int64 }
    get:
      tags: [Role]
      operationId: listAvailableRolePermissionsV2
      summary: List permissions not yet assigned to role (paginated)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
          description: Zero-based page index
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
          description: Page size
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionPage'

  /iam/api/v1/assign/role/{roleId}/permission/{permissionId}:
    parameters:
      - in: path
        name: roleId
        required: true
        schema: { type: integer, format: int64 }
      - in: path
        name: permissionId
        required: true
        schema: { type: integer, format: int64 }
    post:
      tags: [Assignment]
      operationId: addPermissionToRole
      summary: Add permission to role
      responses:
        '200': { description: OK }
    delete:
      tags: [Assignment]
      operationId: removePermissionFromRole
      summary: Remove permission from role
      responses:
        '200': { description: OK }

  /iam/api/v1/assign/user/{accountId}/role/{roleId}:
    parameters:
      - in: path
        name: accountId
        required: true
        schema: { type: string, format: uuid }
      - in: path
        name: roleId
        required: true
        schema: { type: integer, format: int64 }
    post:
      tags: [Assignment]
      operationId: addRoleToUser
      summary: Add role to user
      responses:
        '200': { description: OK }
    delete:
      tags: [Assignment]
      operationId: removeRoleFromUser
      summary: Remove role from user
      responses:
        '200': { description: OK }

  /iam/api/v1/authz/check:
    post:
      tags: [Authorization]
      operationId: checkAuthorization
      summary: Check authorization
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthzCheckRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object } } } }

  /iam/api/v1/users/{accountId}/roles:
    parameters:
      - in: path
        name: accountId
        required: true
        schema: { type: string, format: uuid }
    get:
      tags: [User]
      operationId: getUserRolesPublic
      summary: Get user roles
      description: Requires ROLE_ADMIN.
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { type: string } } } } }

  /iam/internal/v1/users/{accountId}/roles:
    parameters:
      - in: path
        name: accountId
        required: true
        schema: { type: string, format: uuid }
    get:
      tags: [User]
      operationId: getUserRoles
      summary: Get user roles
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { type: string } } } } }

  /iam/internal/v1/entitlements/{accountId}:
    parameters:
      - in: path
        name: accountId
        required: true
        schema: { type: string, format: uuid }
    get:
      tags: [Entitlement]
      operationId: getEntitlements
      summary: Get entitlements
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object } } } }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PermissionPage:
      type: object
      description: Spring-style paginated response of Permission
      properties:
        content: { type: array, items: { $ref: '#/components/schemas/Permission' } }
        number: { type: integer, description: Zero-based page index }
        size: { type: integer }
        totalElements: { type: integer }
        totalPages: { type: integer }
      required: [content]
    Permission:
      type: object
      properties:
        id: { type: integer, format: int64, nullable: true }
        name: { type: string }
        description: { type: string, nullable: true }
      required: [name]
    PermissionRequest:
      type: object
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
      required: [name]
    Role:
      type: object
      properties:
        id: { type: integer, format: int64, nullable: true }
        name: { type: string }
      required: [name]
    RolePage:
      type: object
      description: Spring-style paginated response of Role
      properties:
        content: { type: array, items: { $ref: '#/components/schemas/Role' } }
        number: { type: integer, description: Zero-based page index }
        size: { type: integer }
        totalElements: { type: integer }
        totalPages: { type: integer }
      required: [content]
    RoleRequest:
      type: object
      properties:
        name: { type: string }
      required: [name]
    AuthzCheckRequest:
      type: object
      properties:
        sub: { type: string, format: uuid }
        action: { type: string }
      required: [sub, action]
    ApiError:
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
      required: [message]
    CurrentUser:
      type: object
      properties:
        id: { type: string }
        username: { type: string }
        email: { type: string, format: email, nullable: true }
        roles: { type: array, items: { type: string } }
        permissions: { type: array, items: { type: string, description: "permission string in `<service>:<subject>:<action>`" } }
      required: [id, username, roles, permissions]
