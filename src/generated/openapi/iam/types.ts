/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/iam/api/v1/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get current user profile */
    get: operations['getCurrentUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/api/v1/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List permissions */
    get: operations['listPermissions']
    put?: never
    /** Create permission */
    post: operations['createPermission']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/api/v1/permissions/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    /** Get permission */
    get: operations['getPermission']
    /** Update permission */
    put: operations['updatePermission']
    post?: never
    /** Delete permission */
    delete: operations['deletePermission']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/api/v1/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List roles */
    get: operations['listRoles']
    put?: never
    /** Create role */
    post: operations['createRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/api/v1/roles/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    /** Get role */
    get: operations['getRole']
    /** Update role */
    put: operations['updateRole']
    post?: never
    /** Delete role */
    delete: operations['deleteRole']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/api/v1/assign/role/{roleId}/permission/{permissionId}': {
    parameters: {
      query?: never
      header?: never
      path: {
        roleId: number
        permissionId: number
      }
      cookie?: never
    }
    get?: never
    put?: never
    /** Add permission to role */
    post: operations['addPermissionToRole']
    /** Remove permission from role */
    delete: operations['removePermissionFromRole']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/api/v1/assign/user/{accountId}/role/{roleId}': {
    parameters: {
      query?: never
      header?: never
      path: {
        accountId: string
        roleId: number
      }
      cookie?: never
    }
    get?: never
    put?: never
    /** Add role to user */
    post: operations['addRoleToUser']
    /** Remove role from user */
    delete: operations['removeRoleFromUser']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/api/v1/authz/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Check authorization */
    post: operations['checkAuthorization']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/internal/v1/users/{accountId}/roles': {
    parameters: {
      query?: never
      header?: never
      path: {
        accountId: string
      }
      cookie?: never
    }
    /** Get user roles */
    get: operations['getUserRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/iam/internal/v1/entitlements/{accountId}': {
    parameters: {
      query?: never
      header?: never
      path: {
        accountId: string
      }
      cookie?: never
    }
    /** Get entitlements */
    get: operations['getEntitlements']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Permission: {
      /** Format: int64 */
      id?: number | null
      name: string
      description?: string | null
    }
    PermissionRequest: {
      name: string
      description?: string | null
    }
    Role: {
      /** Format: int64 */
      id?: number | null
      name: string
    }
    RoleRequest: {
      name: string
    }
    AuthzCheckRequest: {
      /** Format: uuid */
      sub: string
      action: string
    }
    ApiError: {
      code?: string | null
      message: string
    }
    CurrentUser: {
      id: string
      username: string
      /** Format: email */
      email?: string | null
      roles: string[]
      permissions: string[]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getCurrentUser: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CurrentUser']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiError']
        }
      }
    }
  }
  listPermissions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Permission'][]
        }
      }
    }
  }
  createPermission: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PermissionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Permission']
        }
      }
    }
  }
  getPermission: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Permission']
        }
      }
    }
  }
  updatePermission: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PermissionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Permission']
        }
      }
    }
  }
  deletePermission: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  listRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Role'][]
        }
      }
    }
  }
  createRole: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Role']
        }
      }
    }
  }
  getRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Role']
        }
      }
    }
  }
  updateRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Role']
        }
      }
    }
  }
  deleteRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  addPermissionToRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        roleId: number
        permissionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  removePermissionFromRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        roleId: number
        permissionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  addRoleToUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        accountId: string
        roleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  removeRoleFromUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        accountId: string
        roleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  checkAuthorization: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthzCheckRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  getUserRoles: {
    parameters: {
      query?: never
      header?: never
      path: {
        accountId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
    }
  }
  getEntitlements: {
    parameters: {
      query?: never
      header?: never
      path: {
        accountId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
}
